create table order_details (order_details_id varchar, order_id varchar, pizza_id varchar,quantity int);
create table orders (order_id varchar,	date_ date,	time_ time);
create table pizza_types (pizza_type_id varchar, pizza_name varchar,category varchar,ingredients varchar);
create table pizzas (pizza_id varchar,	pizza_type_id varchar,	size_ varchar,	price float);
copy order_details (order_details_id , order_id , pizza_id ,quantity ) from 'C:/Program Files/PostgreSQL/16/data/pizza_sales/order_details.csv' delimiter ',' csv header;
copy orders (order_id,	date_,time_ ) from 'C:/Program Files/PostgreSQL/16/data/pizza_sales/orders.csv' delimiter ',' csv header;
copy pizza_types (pizza_type_id, pizza_name,category ,ingredients  ) from 'C:/Program Files/PostgreSQL/16/data/pizza_sales/pizza_types.csv' delimiter ',' csv header;
copy pizzas (pizza_id,	pizza_type_id ,	size_ ,	price ) from 'C:/Program Files/PostgreSQL/16/data/pizza_sales/pizzas.csv' delimiter ',' csv header;
select * from order_details;
select * from orders;
select * from pizza_types;
select * from pizzas;
alter table orders add primary key(order_id);
alter table order_details add primary key (order_details_id);
-- Retrieve the total number of orders placed
select count(distinct order_id) as total_orders from orders;

-- Calculate the total revenue generated by pizza sales
select ROUND(CAST(SUM(a.quantity * b.price) AS NUMERIC), 2) as total_revenue from order_details as a left join pizzas as b on a.pizza_id=b.pizza_id; 

-- Which is our highest priced pizza
select a.pizza_name, b.price, b.size_ from pizza_types as a inner join pizzas as b on a.pizza_type_id=b.pizza_type_id order by price desc limit 1

-- Most common pizza size ordered
SELECT DISTINCT size_ FROM pizzas;
select b.size_,count(a.quantity) as no_of_pizza from order_details as a left join pizzas as b on a.pizza_id=b.pizza_id group by b.size_ order by no_of_pizza

-- Five most ordered pizza type along with their quantities
create table pizza_details as (select a.* , b.pizza_name,b.category, b.ingredients from pizzas as a left join pizza_types as b on a.pizza_type_id=b.pizza_type_id)
select * from pizza_details
-- size considered
select b.pizza_name, b.size_, sum(a.quantity) as total_quantity from order_details as a left join pizza_details as b on a.pizza_id=b.pizza_id group by b.pizza_name, b.size_ order by total_quantity desc limit 10
-- size not considered
select b.pizza_name, sum(a.quantity) as total_quantity from order_details as a left join pizza_details as b on a.pizza_id=b.pizza_id group by b.pizza_name order by total_quantity desc limit 10

-- Same solution by joining 3 tables
select pizza_types.pizza_name,
sum(order_details.quantity)
from pizza_types join pizzas
on pizza_types.pizza_type_id = pizzas.pizza_type_id
join order_details
on order_details.pizza_id = pizzas.pizza_id
group by pizza_types.pizza_name 
order by sum(order_details.quantity) desc

-- Find the total number of each pizza ordered
select b.pizza_name, b.size_, sum(a.quantity) as total_quantity from order_details as a left join pizza_details as b on a.pizza_id=b.pizza_id group by b.pizza_name, b.size_ order by b.pizza_name

select distinct category from pizza_types

--Determine the distribution of orders by hour of the day
SELECT 
    EXTRACT(HOUR FROM time_) AS Hour_of_the_day, 
    CASE 
        WHEN (EXTRACT(HOUR FROM time_) >= 12 AND EXTRACT(HOUR FROM time_) < 16) THEN 'afternoon'
        WHEN (EXTRACT(HOUR FROM time_) >= 16 AND EXTRACT(HOUR FROM time_) < 22) THEN 'evening'
        WHEN (EXTRACT(HOUR FROM time_) >= 22 OR EXTRACT(HOUR FROM time_) < 4) THEN 'night'
        WHEN (EXTRACT(HOUR FROM time_) >= 4 AND EXTRACT(HOUR FROM time_) < 12) THEN 'morning'
    END AS time_of_the_day, 
    COUNT(order_id) AS total_orders 
FROM orders 
GROUP BY Hour_of_the_day 
ORDER BY total_orders DESC;

-- Category-wise distribution of pizzas
select category, count(pizza_name) from pizza_types group by category order by category

-- Group the orders by date and calculate the avg number of pizzas ordered per day
select orders.date_, sum(order_details.quantity) as quantity from orders join order_details on orders.order_id=order_details.order_id group by orders.date_ order by orders.date_
select round(avg(quantity),0) from (select orders.date_, sum(order_details.quantity) as quantity from orders join order_details on orders.order_id=order_details.order_id group by orders.date_ order by orders.date_)

-- Top 3 most ordered pizza based on revenue
select pizza_types.pizza_name, pizza_types.category,pizzas.size_, round(cast(sum(pizzas.price*order_details.quantity) as numeric),2) as revenue from order_details join pizzas on order_details.pizza_id=pizzas.pizza_id join pizza_types on pizzas.pizza_type_id=pizza_types.pizza_type_id group by pizza_types.pizza_name,pizzas.size_, pizza_types.category order by revenue desc
-- Category-wise
select pizza_types.category,round(cast(sum(pizzas.price*order_details.quantity) as numeric),2) as revenue from order_details join pizzas on order_details.pizza_id=pizzas.pizza_id join pizza_types on pizzas.pizza_type_id=pizza_types.pizza_type_id group by pizza_types.category order by revenue desc

-- Calculate the % contribution of each pizza type to total revnue
select pizza_types.pizza_name, pizza_types.category,pizzas.size_, sum((order_details.quantity*pizzas.price)/(select sum(order_details.quantity*pizzas.price) from order_details join pizzas on order_details.pizza_id=pizzas.pizza_id )*100) as contri_in_rev from order_details join pizzas on order_details.pizza_id=pizzas.pizza_id join pizza_types on pizzas.pizza_type_id=pizza_types.pizza_type_id group by pizza_types.pizza_name,pizzas.size_, pizza_types.category order by contri_in_rev desc 
-- Category-wise
select pizza_types.category, round(cast(sum((order_details.quantity*pizzas.price)/(select sum(order_details.quantity*pizzas.price) from order_details join pizzas on order_details.pizza_id=pizzas.pizza_id )*100) as numeric),2) as contri_in_rev from order_details join pizzas on order_details.pizza_id=pizzas.pizza_id join pizza_types on pizzas.pizza_type_id=pizza_types.pizza_type_id group by pizza_types.category order by contri_in_rev desc 

--Analyze the cumulative revenue generated over time
create table rev_by_date as (select orders.date_,sum(pizzas.price*order_details.quantity) as revenue from orders join order_details on orders.order_id=order_details.order_id join pizzas on pizzas.pizza_id=order_details.pizza_id group by orders.date_ )
select * from rev_by_date
select date_,revenue,sum(revenue)over(order by date_ ) from rev_by_date

--Top 3 most ordered pizza based on revenue
create view demo as (select pizza_types.pizza_name, pizza_types.category, pizzas.size_, sum(order_details.quantity*pizzas.price)as revenue, rank() over(partition by category order by sum(order_details.quantity*pizzas.price) desc) as Ranks from order_details join pizzas on order_details.pizza_id=pizzas.pizza_id join pizza_types on pizzas.pizza_type_id=pizza_types.pizza_type_id group by pizza_types.pizza_name,pizzas.size_, pizza_types.category)
select * from demo where ranks<=3